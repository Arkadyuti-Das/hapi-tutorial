Introduction to plugins
========================
If it's a hapi plugin we need to register it with our server. 
options allow us to customize how the plugin works.

(Worked with hapi-geo-locate plugin)
npm i hapi-geo-locate

Serving static files
====================
(inert
A plugin that provides new handler methods for serving static files and directories)
npm install @hapi/inert

note-
handler says what to do,
options say how to do it or gives extra information about the route.

If I am using h.file to any other route other than the specified one, it won't be able to find it.
So for that I need to set that up on the server. 
So instead of using "options", we would use "routes" in the server and the same thing would follow it.

inert also lets us to download files as well as display them.
Setting the mode to "attachment" makes the file become a download as opposed to being displayed.

Working with forms
===================
<input type="text" name="username"> is accessed in hapi by the name attribute as -
request.payload.username

Always remember the handler method must return a value.

serving dynamic files
=====================
We would be using the plugin vison
npm install @hapi/vision

So vision allows us to use template engines in our hapi application.
template engines add code to our HTML file.

After installing vision we would install handlebars as-
npm install handlebars

we need to make it available to our hapi vison and to our server.

server.views -> used to configure our template engines
The key "engines" specifies what templating engine handles the given file extension.
Here we are saying have handlebars handle html files.


The path key makes it so that we do not need to specify the exact location of dynamic pages.
It is saying "hey server if you need a dynamic file look here".

To link views to our server we need to set up a route.

h.view () is used to render a template file with dynamic data.